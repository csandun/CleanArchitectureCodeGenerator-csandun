using AutoMapper;
using Camms.Risk.Application.Dto.Common;
using Camms.Risk.Application.Repository;
using MediatR;
using Microsoft.Extensions.Logging;

namespace {namespace}
{
    public class Update{itemname}CommandHandler : IRequestHandler<Update{itemname}Command, CreatedResponseDto>
    {
        private readonly IRiskUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ILogger<Update{itemname}CommandHandler> _logger;

        public Update{itemname}CommandHandler(
            IRiskUnitOfWork unitOfWork, 
            IMapper mapper, 
            ILogger<Update{itemname}CommandHandler> logger
            )
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _logger = logger;
        }

        public async Task<CreatedResponseDto> Handle(Update{itemname}Command command, CancellationToken cancellationToken)
        {
           // TODO: Update logic goes here.  Example - Refer `UpdateRiskTypeGroupingCommandHandler.cs`

           // TODO: Register update command class with entity like this in CommandMappingProfile class
           /*    
            CreateMap<UpdateRiskTypeGroupingCommand, ObjectTypeGrouping>()
                .ForMember(o => o.Status, p => p.MapFrom(s => s.Status))
                .ForMember(o => o.GroupName, p => p.MapFrom(s => s.GroupName))
                .ForMember(o => o.Description, p => p.MapFrom(s => s.Description));
           */
           
           return  new CreatedResponseDto() { Id = command.Id};
        }
    }
}

