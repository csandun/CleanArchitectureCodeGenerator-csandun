using AutoMapper;
using Camms.Risk.Application.Dto.{itemname};
using Camms.Risk.Application.Interfaces;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Camms.Risk.Application.Query.{itemname}
{
    public class Get{itemname}ByIdQueryHandler : IRequestHandler<Get{itemname}ByIdQuery, {itemname}Dto>
    {
        private readonly IRiskUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public Get{itemname}ByIdQueryHandler(IRiskUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public async Task<{itemname}Dto> Handle(Get{itemname}ByIdQuery request, CancellationToken cancellationToken)
        {
            // TODO: please register {itemname}Dto and {itemname} entity in automapper configuration file

            // TODO: change your get by logic (including navigation properties and etc..)

            var result = await _unitOfWork.GetDatabseContext().{itemname}Repository              
                .FirstOrDefaultAsync(o => o.Id.Equals(request.Id));

            if (result is null)
            {
                throw new ArgumentException("Not found {itemname}");
            }

            return _mapper.Map<{itemname}Dto>(result);
        }
    }
}
